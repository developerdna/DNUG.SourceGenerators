using System.IO;
using System.Linq;
using DNUG.SourceGenerators.Bonus.Tests.Utils;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace DNUG.SourceGenerators.Bonus.Tests;

public class EntitySourceGeneratorTests
{
    private const string EntitiesYaml = """
                                        Namespace: DNUG.Test
                                        Entities:
                                          - Name: Genre
                                            Members:
                                              - Name: ID
                                                Type: integer
                                              - Name: Name
                                                Type: string
                                              - Name: Books
                                                Type: Book[]
                                          - Name: Book
                                            Members:
                                              - Name: ID
                                                Type: integer
                                              - Name: Title
                                                Type: string
                                              - Name: AuthorID
                                                Type: integer
                                              - Name: Author
                                                Type: Author
                                              - Name: GenreID
                                                Type: integer
                                              - Name: Genre
                                                Type: Genre
                                          - Name: Author
                                            Members:
                                                - Name: ID
                                                  Type: integer
                                                - Name: Name
                                                  Type: string
                                                - Name: Books
                                                  Type: Book[]
                                        """;

    private const string GenreFileContent = """
                                            // <auto-generated/>
                                            #nullable enable
                                            
                                            namespace DNUG.Test;
                                            
                                            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DNUG.SourceGenerators.Bonus", "1.0.0.0")]
                                            public partial class Genre
                                            {
                                                public global::System.Int32 ID { get; set; }
                                            
                                                public global::System.String Name { get; set; }
                                            
                                                public global::System.Collections.Generic.List<Book[]> Books { get; set; }
                                            }
                                            
                                            """;
    
    private const string BookFileContent = """
                                            // <auto-generated/>
                                            #nullable enable
                                            
                                            namespace DNUG.Test;
                                            
                                            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DNUG.SourceGenerators.Bonus", "1.0.0.0")]
                                            public partial class Book
                                            {
                                                public global::System.Int32 ID { get; set; }
                                            
                                                public global::System.String Title { get; set; }
                                            
                                                public global::System.Int32 AuthorID { get; set; }
                                            
                                                public Author Author { get; set; }
                                            
                                                public global::System.Int32 GenreID { get; set; }
                                            
                                                public Genre Genre { get; set; }
                                            }
                                            
                                            """;
    
    private const string AuthorFileContent = """
                                            // <auto-generated/>
                                            #nullable enable
                                            
                                            namespace DNUG.Test;
                                            
                                            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DNUG.SourceGenerators.Bonus", "1.0.0.0")]
                                            public partial class Author
                                            {
                                                public global::System.Int32 ID { get; set; }
                                            
                                                public global::System.String Name { get; set; }
                                            
                                                public global::System.Collections.Generic.List<Book[]> Books { get; set; }
                                            }
                                            
                                            """;

    private const string ContextClass = """
                                        using System;
                                        using DNUG.SourceGenerators.Bonus;
                                        
                                        namespace DNUG.Test;
                                        
                                        [EntityContext]
                                        public partial class MyEntityContext;
                                        """;

    private const string ContextClassContent = """
                                               // <auto-generated/>
                                               #nullable enable
                                               
                                               namespace DNUG.Test;
                                               
                                               [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DNUG.SourceGenerators.Bonus", "1.0.0.0")]
                                               public partial class MyEntityContext
                                               {
                                                   public global::System.Collections.Generic.List<Genre> Genre { get; set; }
                                                   public global::System.Collections.Generic.List<Book> Book { get; set; }
                                                   public global::System.Collections.Generic.List<Author> Author { get; set; }
                                               }
                                               
                                               """;
    
    [Fact]
    public void TestEntityFilesAreGenerated()
    {
        var newCompilation = RunGeneration();

        // Retrieve all files in the compilation.
        var generatedFiles = newCompilation.SyntaxTrees
          .Select(t => Path.GetFileName(t.FilePath))
          .ToArray();

        // In this case, it is enough to check the file name.
        Assert.Equivalent(new[]
        {
            "DNUG.Test.Genre.g.cs",
            "DNUG.Test.Book.g.cs",
            "DNUG.Test.Author.g.cs"
        }, generatedFiles);
    }

    [Theory]
    [InlineData("DNUG.Test.Genre.g.cs", GenreFileContent)]
    [InlineData("DNUG.Test.Book.g.cs", BookFileContent)]
    [InlineData("DNUG.Test.Author.g.cs", AuthorFileContent)]
    public void TestGeneratedEntitiesAreCorrect(string generatedFileName, string expectedContent)
    {
      var newCompilation = RunGeneration();

      // Retrieve all files in the compilation.
      var generatedFileContent = newCompilation.SyntaxTrees
        .FirstOrDefault(t => Path.GetFileName(t.FilePath) == generatedFileName)?.GetText()
        .ToString();
      Assert.NotNull(generatedFileContent);
      
      Assert.Equivalent(generatedFileContent, expectedContent);
    }

    [Fact]
    public void TestContextGeneration()
    {
      // Create an instance of the source generator.
      var generator = new EntitySourceGenerator();

      // Source generators should be tested using 'GeneratorDriver'.
      GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
      
      // Add the additional file separately from the compilation.
      driver = driver.AddAdditionalTexts([new TestAdditionalFile("./entities.yaml", EntitiesYaml)]);

      // We need to create a compilation with the required source code.
      var compilation = CSharpCompilation.Create(nameof(EntitySourceGeneratorTests),
        [CSharpSyntaxTree.ParseText(ContextClass)],
        [
          // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
          MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
        ]);

      // Run generators and retrieve all results.
      var runResult = driver.RunGenerators(compilation).GetRunResult();

      // All generated files can be found in 'RunResults.GeneratedTrees'.
      var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("DNUG.Test.MyEntityContext.g.cs"));

      // Complex generators should be tested using text comparison.
      Assert.Equal(ContextClassContent, generatedFileSyntax.GetText().ToString(),
        ignoreLineEndingDifferences: true);
    }
    
    private static Compilation RunGeneration()
    {
      // Create an instance of the source generator.
      var generator = new EntitySourceGenerator();

      // Source generators should be tested using 'GeneratorDriver'.
      GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);

      // Add the additional file separately from the compilation.
      driver = driver.AddAdditionalTexts([new TestAdditionalFile("./entities.yaml", EntitiesYaml)]);

      // To run generators, we can use an empty compilation.
      var compilation = CSharpCompilation.Create(nameof(EntitySourceGeneratorTests));

      // Run generators. Don't forget to use the new compilation rather than the previous one.
      driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out _);
      return newCompilation;
    }
}